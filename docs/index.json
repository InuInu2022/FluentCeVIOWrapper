{
  "api/FluentCeVIOWrapper.Common.CeVIOTalkMessage.html": {
    "href": "api/FluentCeVIOWrapper.Common.CeVIOTalkMessage.html",
    "title": "Class CeVIOTalkMessage | Documentation - FluentCeVIOWrapper",
    "keywords": "Class CeVIOTalkMessage 内部の通信で使われるメッセージクラス Inheritance object CeVIOTalkMessage Namespace: FluentCeVIOWrapper.Common Assembly: FluentCeVIOWrapper.Common.dll Syntax [Serializable] public class CeVIOTalkMessage Properties Id メッセージの識別子ID Declaration public Guid Id { get; set; } Property Value Type Description Guid Product メッセージの対象CeVIO製品 Declaration public Product Product { get; set; } Property Value Type Description Product ServerCallArgValues やり取りする場合の関数の引数 Declaration public ReadOnlyCollection<dynamic>? ServerCallArgValues { get; set; } Property Value Type Description ReadOnlyCollection<dynamic> ServerCallName やり取りする関数の名前 Declaration public string? ServerCallName { get; set; } Property Value Type Description string ServerCallValue やり取りする値 Declaration public dynamic? ServerCallValue { get; set; } Property Value Type Description dynamic ServerCommand A command message text for server Declaration public string? ServerCommand { get; set; } Property Value Type Description string See Also ServerCommand ServerHost ホストアプリ（CeVIO）の内部的なコンポーネント種別 Declaration public Host? ServerHost { get; set; } Property Value Type Description Host? Methods ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "api/FluentCeVIOWrapper.Common.FluentCeVIO.html": {
    "href": "api/FluentCeVIOWrapper.Common.FluentCeVIO.html",
    "title": "Class FluentCeVIO | Documentation - FluentCeVIOWrapper",
    "keywords": "Class FluentCeVIO A wrapper library for FluentCeVIOWrapper Client Inheritance object FluentCeVIO Implements IDisposable Namespace: FluentCeVIOWrapper.Common Assembly: FluentCeVIOWrapper.Common.dll Syntax public class FluentCeVIO : IDisposable Remarks .NET Core系(.NET 5/6/...)でもCeVIOの.NET Framework APIにアクセスできるラッパーライブラリ async/awaitに対応したモダンな書き方ができます Fields PipeName 内部のプロセス間通信で使用される名前です。 複数サーバーを立てる場合はサーバーと共にこの名前を変更します。 Declaration public const string PipeName = \"FluentCeVIOPipe\" Field Value Type Description string Properties CurrentPipeName 現在の内部のプロセス間通信で使用される名前です。 Declaration public string CurrentPipeName { get; set; } Property Value Type Description string CurrentProduct 現在の制御CeVIO製品 Declaration public Product CurrentProduct { get; } Property Value Type Description Product CurrentVersion 現在の制御しているCeVIOのバージョン Declaration public Version? CurrentVersion { get; } Property Value Type Description Version Methods CloseAsync() 非同期で終了処理 Declaration public Task<bool> CloseAsync() Returns Type Description Task<bool> Examples await CloseHost(); //通常の使い方 var _ = CloseHost(); //同期的に処理 CreateParam() まとめてパラメータを設定するための準備 メソッドチェーンでパラメータを指定できます Declaration public FluentCeVIOParam CreateParam() Returns Type Description FluentCeVIOParam Examples var fcw = FluentCeVIO.FactoryAsync(); await fcw.CreateParam() .Cast(\"さとうささら\") .Alpha(50) .Speed(75) .SendAsync(); FactoryAsync(string?, Product) 呼び出しのファクトリメソッド Declaration public static ValueTask<FluentCeVIO> FactoryAsync(string? pipeName = \"FluentCeVIOPipe\", Product product = Product.CeVIO_AI) Parameters Type Name Description string pipeName 内部のプロセス間通信で使用される名前です。 複数サーバーを立てる場合はサーバーと共にこの名前を変更します。 Product product 呼び出すCeVIO製品 Returns Type Description ValueTask<FluentCeVIO> GetAlphaAsync() 声質（0～100）を取得します。 Declaration public Task<uint> GetAlphaAsync() Returns Type Description Task<uint> 声質（0～100） See Also SetAlphaAsync(uint) GetAvailableCastsAsync() 利用可能なキャスト名 string[] を取得します。 Declaration public Task<string[]> GetAvailableCastsAsync() Returns Type Description Task<string[]> 利用可能なキャスト名の配列 Remarks 備考：インストールされているボイスによります。 See Also SetCastAsync(string) GetCastAsync() 現在のキャスト(話者)を取得します。 Declaration public Task<string> GetCastAsync() Returns Type Description Task<string> キャスト名 See Also SetCastAsync(string) GetComponentsAsync() 現在のキャストの感情パラメータマップコレクションを取得します。 Declaration public Task<ReadOnlyCollection<TalkerComponent>> GetComponentsAsync() Returns Type Description Task<ReadOnlyCollection<TalkerComponent>> 感情パラメータの管理オブジェクトTalkerComponentのReadOnlyCollection<T> Remarks 戻り値は、元のAPIと異なり、汎用のReadOnlyCollection<T>で返ります。 See Also TalkerComponent GetCastAsync() SetCastAsync(string) SetComponentsAsync(IEnumerable<TalkerComponent>) GetHostVersionAsync() ホストアプリ（CeVIO）のバージョンをVersion型で返す Declaration public Task<Version> GetHostVersionAsync() Returns Type Description Task<Version> バージョン See Also Version GetIsHostStartedAsync() ホストアプリ（CeVIO）が起動中かどうか Declaration public Task<bool> GetIsHostStartedAsync() Returns Type Description Task<bool> GetPhonemesAsync(string) 指定したセリフの音素単位のデータを取得します。 Declaration public Task<ReadOnlyCollection<PhonemeData>> GetPhonemesAsync(string text) Parameters Type Name Description string text セリフ。日本語は最大200文字（古いバージョンは150文字）。 Returns Type Description Task<ReadOnlyCollection<PhonemeData>> 音素単位のデータのコレクション Remarks リップシンク等に利用できます。 戻り値は、元のAPIと異なり、汎用のReadOnlyCollection<T>で返ります。 See Also PhonemeData GetSpeedAsync() 話す速さ（0～100）を取得します。 Declaration public Task<uint> GetSpeedAsync() Returns Type Description Task<uint> 話す速さ（0～100） See Also SetSpeedAsync(uint) GetTextDurationAsync(string) 指定したセリフの長さを取得します。 Declaration public Task<double> GetTextDurationAsync(string text) Parameters Type Name Description string text セリフ。日本語は最大200文字（古いバージョンは150文字）。 Returns Type Description Task<double> 長さ。単位は秒。 GetToneAsync() 音の高さ（0～100）を取得します。 Declaration public Task<uint> GetToneAsync() Returns Type Description Task<uint> 音の高さ（0～100） See Also SetToneAsync(uint) GetToneScaleAsync() 抑揚（0～100）を取得します。 Declaration public Task<uint> GetToneScaleAsync() Returns Type Description Task<uint> 抑揚（0～100） See Also SetToneScaleAsync(uint) GetVolumeAsync() 音の大きさ（0～100）を取得します。 Declaration public Task<uint> GetVolumeAsync() Returns Type Description Task<uint> 音の大きさ（0～100） See Also SetVolumeAsync(uint) OutputWaveToFileAsync(string, string) 指定したセリフをWAVファイルとして出力します。 Declaration public Task<bool> OutputWaveToFileAsync(string text, string path) Parameters Type Name Description string text セリフ。 string path 出力先パス。 Returns Type Description Task<bool> 成功した場合はtrue。それ以外の場合はfalse。 Remarks 出力形式はサンプリングレート48kHz, ビットレート16bit, モノラルです。 SetAlphaAsync(uint) 声質（0～100）を設定します。 Declaration public ValueTask SetAlphaAsync(uint value) Parameters Type Name Description uint value 声質（0～100） Returns Type Description ValueTask See Also GetAlphaAsync() Alpha(uint) SetCastAsync(string) キャスト(話者)を設定します。 Declaration public ValueTask SetCastAsync(string castName) Parameters Type Name Description string castName キャスト名。利用可能なキャスト名の文字列はGetAvailableCastsAsync()で取得可。 Returns Type Description ValueTask See Also GetCastAsync() GetAvailableCastsAsync() Cast(string) SetComponentsAsync(IEnumerable<TalkerComponent>) 現在のキャストの感情パラメータマップコレクションを設定します。 Declaration public ValueTask SetComponentsAsync(IEnumerable<TalkerComponent> value) Parameters Type Name Description IEnumerable<TalkerComponent> value 感情パラメータの管理オブジェクト Returns Type Description ValueTask See Also TalkerComponent GetComponentsAsync() SetSpeedAsync(uint) 話す速さ（0～100）を設定します。 Declaration public ValueTask SetSpeedAsync(uint value) Parameters Type Name Description uint value 話す速さ（0～100） Returns Type Description ValueTask See Also GetSpeedAsync() Speed(uint) SetToneAsync(uint) 音の高さ（0～100）を設定します。 Declaration public ValueTask SetToneAsync(uint value) Parameters Type Name Description uint value 音の高さ（0～100） Returns Type Description ValueTask See Also GetToneAsync() Tone(uint) SetToneScaleAsync(uint) 抑揚（0～100）を設定します。 Declaration public ValueTask SetToneScaleAsync(uint value) Parameters Type Name Description uint value 抑揚（0～100） Returns Type Description ValueTask See Also GetToneScaleAsync() ToneScale(uint) SetVolumeAsync(uint) 音の大きさ（0～100）を設定します。 Declaration public ValueTask SetVolumeAsync(uint volume) Parameters Type Name Description uint volume 音の大きさ（0～100） Returns Type Description ValueTask See Also GetVolumeAsync() Volume(uint) SpeakAsync(string, bool, SpeakSegment, CancellationToken?) 指定したセリフの再生を開始します。 Declaration public Task<bool> SpeakAsync(string text, bool isWait = true, SpeakSegment segment = SpeakSegment.Short, CancellationToken? token = null) Parameters Type Name Description string text セリフ。日本語は最大200文字（古いバージョンは150文字）。 bool isWait 再生終了まで待つかどうか SpeakSegment segment セリフ文字列の分割モードの指定。 CancellationToken? token Returns Type Description Task<bool> セリフの再生に成功したかどうか。 Examples await SpeakAsync(\"こんにちは\"); //再生終了まで待つ await SpeakAsync(\"こんにちは\",true); See Also SpeakSegment StartAsync() 非同期で起動 元のStartHost Declaration public Task<HostStartResult> StartAsync() Returns Type Description Task<HostStartResult> StopAsync() 再生を停止します。 Declaration public Task<bool> StopAsync() Returns Type Description Task<bool> 成功した場合はtrue。それ以外の場合はfalse。 Implements IDisposable Extension Methods FluentCeVIOUtil.GetCastIdAsync(FluentCeVIO, string?) FluentCeVIOUtil.IsEnglishCastId(FluentCeVIO, string) FluentCeVIOUtil.IsEnglishCastNameAsync(FluentCeVIO, string?)"
  },
  "api/FluentCeVIOWrapper.Common.FluentCeVIOParam.html": {
    "href": "api/FluentCeVIOWrapper.Common.FluentCeVIOParam.html",
    "title": "Class FluentCeVIOParam | Documentation - FluentCeVIOWrapper",
    "keywords": "Class FluentCeVIOParam CeVIOにまとめてメソッドチェーン(Buiderパターン)でパラメータを指定できるパラメータクラス Inheritance object FluentCeVIOParam Namespace: FluentCeVIOWrapper.Common Assembly: FluentCeVIOWrapper.Common.dll Syntax public class FluentCeVIOParam Methods Alpha(uint) 声質（0～100）を設定します。 Declaration public FluentCeVIOParam Alpha(uint value) Parameters Type Name Description uint value 声質（0～100） Returns Type Description FluentCeVIOParam See Also GetAlphaAsync() Alpha(uint) SetAlphaAsync(uint) Cast(string) キャスト(話者)を設定します。 Declaration public FluentCeVIOParam Cast(string castName) Parameters Type Name Description string castName キャスト名。利用可能なキャスト名の文字列はGetAvailableCastsAsync()で取得可。 Returns Type Description FluentCeVIOParam See Also GetCastAsync() GetAvailableCastsAsync() Cast(string) SetCastAsync(string) Components(IEnumerable<TalkerComponent>) 現在のキャストの感情パラメータマップコレクションを設定します。 Declaration public FluentCeVIOParam Components(IEnumerable<TalkerComponent> value) Parameters Type Name Description IEnumerable<TalkerComponent> value 感情パラメータの管理オブジェクト Returns Type Description FluentCeVIOParam See Also TalkerComponent GetComponentsAsync() SetComponentsAsync(IEnumerable<TalkerComponent>) GetComponentsAsync() Create(FluentCeVIO) メソッドチェーンでパラメータを指定できるパラメータクラスのファクトリメソッド 最後に SendAsync()を呼ぶ Declaration public static FluentCeVIOParam Create(FluentCeVIO fcw) Parameters Type Name Description FluentCeVIO fcw FluentCeVIOインスタンス Returns Type Description FluentCeVIOParam See Also CreateParam() SendAsync() Emotions(Dictionary<string, uint>) Componentsの簡易版。 Declaration public FluentCeVIOParam Emotions(Dictionary<string, uint> list) Parameters Type Name Description Dictionary<string, uint> list 感情名、値（0~100）のDictionaryを与えてください Returns Type Description FluentCeVIOParam Examples .Emotions(new(){[\"怒り\"]=15,[\"普通\"]=50}) See Also Components(IEnumerable<TalkerComponent>) SendAndSpeakAsync(string, bool, SpeakSegment, CancellationToken?) メソッドチェーンで指定したパラメータをまとめて設定してすぐに発声する 必ず最後に呼ぶ Declaration public ValueTask SendAndSpeakAsync(string text, bool isWait = true, SpeakSegment segment = SpeakSegment.NoCheck, CancellationToken? token = null) Parameters Type Name Description string text セリフ。日本語は最大200文字（古いバージョンは150文字）。 bool isWait 再生終了まで待つかどうか SpeakSegment segment セリフ文字列の分割モードの指定。 CancellationToken? token Returns Type Description ValueTask セリフの再生に成功したかどうか。 Examples await SpeakAsync(\"こんにちは\"); //再生終了まで待つ await SpeakAsync(\"こんにちは\",true); See Also SpeakSegment SendAsync() SendAsync() メソッドチェーンで指定したパラメータをまとめて設定する 必ず最後に呼ぶ Declaration public ValueTask SendAsync() Returns Type Description ValueTask See Also Create(FluentCeVIO) SendAndSpeakAsync(string, bool, SpeakSegment, CancellationToken?) Speed(uint) 話す速さ（0～100）を設定します。 Declaration public FluentCeVIOParam Speed(uint value) Parameters Type Name Description uint value 話す速さ（0～100） Returns Type Description FluentCeVIOParam See Also GetSpeedAsync() Speed(uint) SetSpeedAsync(uint) Tone(uint) 音の高さ（0～100）を設定します。 Declaration public FluentCeVIOParam Tone(uint value) Parameters Type Name Description uint value 音の高さ（0～100） Returns Type Description FluentCeVIOParam See Also GetToneAsync() Tone(uint) SetToneAsync(uint) ToneScale(uint) 抑揚（0～100）を設定します。 Declaration public FluentCeVIOParam ToneScale(uint value) Parameters Type Name Description uint value 抑揚（0～100） Returns Type Description FluentCeVIOParam See Also GetToneScaleAsync() ToneScale(uint) SetToneScaleAsync(uint) Volume(uint) 音の大きさ（0～100）を設定します。 Declaration public FluentCeVIOParam Volume(uint volume) Parameters Type Name Description uint volume 音の大きさ（0～100） Returns Type Description FluentCeVIOParam See Also GetVolumeAsync() Volume(uint) SetVolumeAsync(uint)"
  },
  "api/FluentCeVIOWrapper.Common.FluentCeVIOUtil.html": {
    "href": "api/FluentCeVIOWrapper.Common.FluentCeVIOUtil.html",
    "title": "Class FluentCeVIOUtil | Documentation - FluentCeVIOWrapper",
    "keywords": "Class FluentCeVIOUtil ユーティリティクラス Inheritance object FluentCeVIOUtil Namespace: FluentCeVIOWrapper.Common Assembly: FluentCeVIOWrapper.Common.dll Syntax public static class FluentCeVIOUtil Methods GetCastIdAsync(FluentCeVIO, string?) 現在のキャストまたは指定したキャスト名からキャストIDを取得 Declaration public static Task<string> GetCastIdAsync(this FluentCeVIO fcw, string? castName = null) Parameters Type Name Description FluentCeVIO fcw string castName キャスト名。未指定の場合は現在のキャストで取得。 Returns Type Description Task<string> 内部的なキャストID文字列（CeVIO AI:CTNV-xxx-x, CeVIO CS: X） Exceptions Type Condition NotSupportedException CurrentProductがCeVIO_AI, CeVIO_CSでない場合は未対応 IsEnglishCastId(FluentCeVIO, string) キャストIDが英語音源のものかどうか Declaration public static bool IsEnglishCastId(this FluentCeVIO fcw, string castId) Parameters Type Name Description FluentCeVIO fcw string castId キャストID Returns Type Description bool See Also IsEnglishCastNameAsync(FluentCeVIO, string?) IsEnglishCastNameAsync(FluentCeVIO, string?) キャスト名が英語音源かどうか Declaration public static ValueTask<bool> IsEnglishCastNameAsync(this FluentCeVIO fcw, string? castName = null) Parameters Type Name Description FluentCeVIO fcw string castName キャスト名。未指定の場合は現在の指定されたキャストを判定します。 Returns Type Description ValueTask<bool> Remarks キャスト名（ボイス名）から英語音源かどうかを判定します。 IDがわかっている場合は、 IsEnglishCastId(FluentCeVIO, string)の方が高速で判定します。 See Also IsEnglishCastId(FluentCeVIO, string)"
  },
  "api/FluentCeVIOWrapper.Common.Host.html": {
    "href": "api/FluentCeVIOWrapper.Common.Host.html",
    "title": "Enum Host | Documentation - FluentCeVIOWrapper",
    "keywords": "Enum Host ホストアプリ（CeVIO）の内部的なコンポーネント種別 Namespace: FluentCeVIOWrapper.Common Assembly: FluentCeVIOWrapper.Common.dll Syntax [Serializable] public enum Host Fields Name Description Agent Agent Service Service Talker Talker"
  },
  "api/FluentCeVIOWrapper.Common.Models.FCWFormatter.html": {
    "href": "api/FluentCeVIOWrapper.Common.Models.FCWFormatter.html",
    "title": "Class FCWFormatter | Documentation - FluentCeVIOWrapper",
    "keywords": "Class FCWFormatter FCW formatter Inheritance object FormatterBase CerasFormatter FCWFormatter Implements IFormatter Inherited Members FormatterBase.Serialize(object) FormatterBase.Deserialize<T>(byte[]) Namespace: FluentCeVIOWrapper.Common.Models Assembly: FluentCeVIOWrapper.Common.dll Syntax public class FCWFormatter : CerasFormatter, IFormatter Constructors FCWFormatter(SerializerConfig?) コンストラクタ Declaration public FCWFormatter(SerializerConfig? config = null) Parameters Type Name Description SerializerConfig config Properties InternalFormatter 内部フォーマッター Declaration public CerasSerializer InternalFormatter { get; } Property Value Type Description CerasSerializer Methods DeserializeInternal<T>(byte[]) デシリアライズ Declaration protected override T DeserializeInternal<T>(byte[] bytes) Parameters Type Name Description byte[] bytes Returns Type Description T Type Parameters Name Description T Overrides CerasFormatter.DeserializeInternal<T>(byte[]) SerializeInternal(object) シリアライズ Declaration protected override byte[] SerializeInternal(object obj) Parameters Type Name Description object obj Returns Type Description byte[] Overrides CerasFormatter.SerializeInternal(object) Implements H.Formatters.IFormatter"
  },
  "api/FluentCeVIOWrapper.Common.Models.PhonemeData.html": {
    "href": "api/FluentCeVIOWrapper.Common.Models.PhonemeData.html",
    "title": "Class PhonemeData | Documentation - FluentCeVIOWrapper",
    "keywords": "Class PhonemeData Inheritance object PhonemeData Implements IPhonemeData Namespace: FluentCeVIOWrapper.Common.Models Assembly: FluentCeVIOWrapper.Common.dll Syntax [Serializable] public class PhonemeData : IPhonemeData Constructors PhonemeData(double, double, string) Declaration public PhonemeData(double startTime, double endTime, string phoneme) Parameters Type Name Description double startTime double endTime string phoneme Properties EndTime 終了時間を取得します。単位は秒。 Declaration public double EndTime { get; set; } Property Value Type Description double Phoneme 音素を取得します。 Declaration public string Phoneme { get; set; } Property Value Type Description string StartTime 開始時間を取得します。単位は秒。 Declaration public double StartTime { get; set; } Property Value Type Description double Implements IPhonemeData"
  },
  "api/FluentCeVIOWrapper.Common.Models.html": {
    "href": "api/FluentCeVIOWrapper.Common.Models.html",
    "title": "Namespace FluentCeVIOWrapper.Common.Models | Documentation - FluentCeVIOWrapper",
    "keywords": "Namespace FluentCeVIOWrapper.Common.Models Classes FCWFormatter FCW formatter PhonemeData"
  },
  "api/FluentCeVIOWrapper.Common.Product.html": {
    "href": "api/FluentCeVIOWrapper.Common.Product.html",
    "title": "Enum Product | Documentation - FluentCeVIOWrapper",
    "keywords": "Enum Product CeVIO products Namespace: FluentCeVIOWrapper.Common Assembly: FluentCeVIOWrapper.Common.dll Syntax [Serializable] public enum Product Fields Name Description CeVIO_AI CeVIO AI ver.8.0 >= CeVIO_CS CeVIO Creative Studio ver. 7.0 >="
  },
  "api/FluentCeVIOWrapper.Common.ServerCommand.html": {
    "href": "api/FluentCeVIOWrapper.Common.ServerCommand.html",
    "title": "Class ServerCommand | Documentation - FluentCeVIOWrapper",
    "keywords": "Class ServerCommand 通信で使われるコマンド定義 Inheritance object ServerCommand Namespace: FluentCeVIOWrapper.Common Assembly: FluentCeVIOWrapper.Common.dll Syntax [Serializable] public static class ServerCommand Fields CallMethod メソッド呼び出しコマンド Declaration public const string CallMethod = \"CALL_METHOD\" Field Value Type Description string Echo debug use only Declaration public const string Echo = \"ECHO\" Field Value Type Description string GetProperty プロパティ取得コマンド Declaration public const string GetProperty = \"GET_PROPERTY\" Field Value Type Description string SetProperty プロパティ設定コマンド Declaration public const string SetProperty = \"SET_PROPERTY\" Field Value Type Description string"
  },
  "api/FluentCeVIOWrapper.Common.SpeakSegment.html": {
    "href": "api/FluentCeVIOWrapper.Common.SpeakSegment.html",
    "title": "Enum SpeakSegment | Documentation - FluentCeVIOWrapper",
    "keywords": "Enum SpeakSegment セリフをしゃべる際の分割方法を指定します Namespace: FluentCeVIOWrapper.Common Assembly: FluentCeVIOWrapper.Common.dll Syntax public enum SpeakSegment Remarks 文字数制限はバージョンと言語によって異なります。文字数制限を超えたセリフを喋らせた場合、そのままではエラーが発生し、はみ出した文字は発声されません。 SpeakAsync(string, bool, SpeakSegment, CancellationToken?)のsegmentでこの指定をすることでエラーを発生させずに長文読み上げが可能になります。 CeVIO CS-150文字 CeVIO AI ver.8.1.19より前150文字 CeVIO AI 日本語 ver.8.1.19以降200文字 CeVIO AI 英語 ver.8.1.19以降500文字 Fields Name Description Long セリフをなるべく文字数制限に近い文字数で分割し、なるべく長くなるようにします。 NoCheck セリフ分割せず、文字数制限もチェックしません。 文字数制限を超えていた場合はエラーになります。 文字数が短いことがわかっている場合や、分割処理を自分で行う場合に指定してください。 Short セリフを最初の句読点で分割し、なるべく短くなるようにします。 See Also SpeakAsync(string, bool, SpeakSegment, CancellationToken?)"
  },
  "api/FluentCeVIOWrapper.Common.Talk.Environment.AI.html": {
    "href": "api/FluentCeVIOWrapper.Common.Talk.Environment.AI.html",
    "title": "Class AI | Documentation - FluentCeVIOWrapper",
    "keywords": "Class AI CeVIO AI environment Inheritance object AI Implements IEnvironment Namespace: FluentCeVIOWrapper.Common.Talk.Environment Assembly: FluentCeVIOWrapper.Common.dll Syntax public class AI : IEnvironment Properties Agent TalkerAgent class Declaration public string Agent { get; } Property Value Type Description string DllName dllの名称 Declaration public string DllName { get; } Property Value Type Description string DllPath デフォルトのdllのpath Declaration public string DllPath { get; set; } Property Value Type Description string Product CeVIOの種類 Declaration public Product Product { get; } Property Value Type Description Product Service ServiceControll class Declaration public string Service { get; } Property Value Type Description string Talker Talker class Declaration public string Talker { get; } Property Value Type Description string Implements IEnvironment"
  },
  "api/FluentCeVIOWrapper.Common.Talk.Environment.CS.html": {
    "href": "api/FluentCeVIOWrapper.Common.Talk.Environment.CS.html",
    "title": "Class CS | Documentation - FluentCeVIOWrapper",
    "keywords": "Class CS CeVIO Creative Studio (64bit) environment Inheritance object CS Implements IEnvironment Namespace: FluentCeVIOWrapper.Common.Talk.Environment Assembly: FluentCeVIOWrapper.Common.dll Syntax public class CS : IEnvironment Properties Agent TalkerAgent class Declaration public string Agent { get; } Property Value Type Description string DllName dllの名称 Declaration public string DllName { get; } Property Value Type Description string DllPath デフォルトのdllのpath Declaration public string DllPath { get; set; } Property Value Type Description string Product CeVIOの種類 Declaration public Product Product { get; } Property Value Type Description Product Service ServiceControll class Declaration public string Service { get; } Property Value Type Description string Talker Talker class Declaration public string Talker { get; } Property Value Type Description string Implements IEnvironment"
  },
  "api/FluentCeVIOWrapper.Common.Talk.Environment.IEnvironment.html": {
    "href": "api/FluentCeVIOWrapper.Common.Talk.Environment.IEnvironment.html",
    "title": "Interface IEnvironment | Documentation - FluentCeVIOWrapper",
    "keywords": "Interface IEnvironment Product env path default values Namespace: FluentCeVIOWrapper.Common.Talk.Environment Assembly: FluentCeVIOWrapper.Common.dll Syntax public interface IEnvironment Properties Agent TalkerAgent class Declaration string Agent { get; } Property Value Type Description string DllName dllの名称 Declaration string DllName { get; } Property Value Type Description string DllPath デフォルトのdllのpath Declaration string DllPath { get; set; } Property Value Type Description string Product CeVIOの種類 Declaration Product Product { get; } Property Value Type Description Product Service ServiceControll class Declaration string Service { get; } Property Value Type Description string Talker Talker class Declaration string Talker { get; } Property Value Type Description string"
  },
  "api/FluentCeVIOWrapper.Common.Talk.Environment.html": {
    "href": "api/FluentCeVIOWrapper.Common.Talk.Environment.html",
    "title": "Namespace FluentCeVIOWrapper.Common.Talk.Environment | Documentation - FluentCeVIOWrapper",
    "keywords": "Namespace FluentCeVIOWrapper.Common.Talk.Environment Classes AI CeVIO AI environment CS CeVIO Creative Studio (64bit) environment Interfaces IEnvironment Product env path default values"
  },
  "api/FluentCeVIOWrapper.Common.Talk.HostCloseMode.html": {
    "href": "api/FluentCeVIOWrapper.Common.Talk.HostCloseMode.html",
    "title": "Enum HostCloseMode | Documentation - FluentCeVIOWrapper",
    "keywords": "Enum HostCloseMode [FluentCeVIOWrapper] 利用しません。 Namespace: FluentCeVIOWrapper.Common.Talk Assembly: FluentCeVIOWrapper.Common.dll Syntax public enum HostCloseMode Fields Name Description Default"
  },
  "api/FluentCeVIOWrapper.Common.Talk.HostStartResult.html": {
    "href": "api/FluentCeVIOWrapper.Common.Talk.HostStartResult.html",
    "title": "Enum HostStartResult | Documentation - FluentCeVIOWrapper",
    "keywords": "Enum HostStartResult StartAsync() の結果コードを表します。 Namespace: FluentCeVIOWrapper.Common.Talk Assembly: FluentCeVIOWrapper.Common.dll Syntax public enum HostStartResult Fields Name Description FileNotFound 実行ファイルが見つからない。 HostError アプリケーション起動後、エラーにより終了。 NotRegistered インストール状態が不明。 StartingFailed プロセスの起動に失敗。 Succeeded 成功。起動済みの場合も含みます。"
  },
  "api/FluentCeVIOWrapper.Common.Talk.IPhonemeData.html": {
    "href": "api/FluentCeVIOWrapper.Common.Talk.IPhonemeData.html",
    "title": "Interface IPhonemeData | Documentation - FluentCeVIOWrapper",
    "keywords": "Interface IPhonemeData 音素データの単位オブジェクト。 Namespace: FluentCeVIOWrapper.Common.Talk Assembly: FluentCeVIOWrapper.Common.dll Syntax public interface IPhonemeData Properties EndTime 終了時間を取得します。単位は秒。 Declaration double EndTime { get; } Property Value Type Description double Phoneme 音素を取得します。 Declaration string Phoneme { get; } Property Value Type Description string StartTime 開始時間を取得します。単位は秒。 Declaration double StartTime { get; } Property Value Type Description double"
  },
  "api/FluentCeVIOWrapper.Common.Talk.IServiceControl.html": {
    "href": "api/FluentCeVIOWrapper.Common.Talk.IServiceControl.html",
    "title": "Interface IServiceControl | Documentation - FluentCeVIOWrapper",
    "keywords": "Interface IServiceControl メソッド・プロパティ名共有のためのInterface for ServiceControl Namespace: FluentCeVIOWrapper.Common.Talk Assembly: FluentCeVIOWrapper.Common.dll Syntax public interface IServiceControl Properties HostVersion 【CeVIO AI】のバージョンを取得します。 Declaration string HostVersion { get; } Property Value Type Description string IsHostStarted 【CeVIO AI】にアクセス可能かどうか取得します。 Declaration bool IsHostStarted { get; } Property Value Type Description bool Methods CloseHost(HostCloseMode) 終了を要求 Declaration void CloseHost(HostCloseMode mode = HostCloseMode.Default) Parameters Type Name Description HostCloseMode mode StartHost(bool) 【CeVIO AI】を起動 Declaration HostStartResult StartHost(bool noWait) Parameters Type Name Description bool noWait Returns Type Description HostStartResult"
  },
  "api/FluentCeVIOWrapper.Common.Talk.ISpeakingState.html": {
    "href": "api/FluentCeVIOWrapper.Common.Talk.ISpeakingState.html",
    "title": "Interface ISpeakingState | Documentation - FluentCeVIOWrapper",
    "keywords": "Interface ISpeakingState [FluentCeVIOWrapper] 利用しません。 Namespace: FluentCeVIOWrapper.Common.Talk Assembly: FluentCeVIOWrapper.Common.dll Syntax public interface ISpeakingState Properties IsCompleted Declaration bool IsCompleted { get; } Property Value Type Description bool IsSucceeded Declaration bool IsSucceeded { get; } Property Value Type Description bool Methods Wait() Declaration void Wait() Wait(double) Declaration void Wait(double timeout) Parameters Type Name Description double timeout"
  },
  "api/FluentCeVIOWrapper.Common.Talk.ITalker.html": {
    "href": "api/FluentCeVIOWrapper.Common.Talk.ITalker.html",
    "title": "Interface ITalker | Documentation - FluentCeVIOWrapper",
    "keywords": "Interface ITalker メソッド・プロパティ名共有のためのInterface Interface for Talker Namespace: FluentCeVIOWrapper.Common.Talk Assembly: FluentCeVIOWrapper.Common.dll Syntax public interface ITalker Properties Alpha 声質（0～100）を取得または設定します。 Declaration uint Alpha { get; set; } Property Value Type Description uint AvailableCasts Declaration string[] AvailableCasts { get; } Property Value Type Description string[] Cast Declaration string Cast { get; set; } Property Value Type Description string Components Declaration ReadOnlyCollection<TalkerComponent> Components { get; } Property Value Type Description ReadOnlyCollection<TalkerComponent> Speed 話す速さ（0～100）を取得または設定します。 Declaration uint Speed { get; set; } Property Value Type Description uint Tone 音の高さ（0～100）を取得または設定します。 Declaration uint Tone { get; set; } Property Value Type Description uint ToneScale Declaration uint ToneScale { get; set; } Property Value Type Description uint Volume 音の大きさ（0～100）を取得または設定します。 Declaration uint Volume { get; set; } Property Value Type Description uint Methods GetPhonemes(string) Declaration IPhonemeData[] GetPhonemes(string text) Parameters Type Name Description string text Returns Type Description IPhonemeData[] GetTextDuration(string) Declaration double GetTextDuration(string text) Parameters Type Name Description string text Returns Type Description double OutputWaveToFile(string, string) Declaration bool OutputWaveToFile(string text, string path) Parameters Type Name Description string text string path Returns Type Description bool Speak(string) Declaration ISpeakingState Speak(string text) Parameters Type Name Description string text Returns Type Description ISpeakingState Stop() Declaration bool Stop() Returns Type Description bool"
  },
  "api/FluentCeVIOWrapper.Common.Talk.ITalkerComponent.html": {
    "href": "api/FluentCeVIOWrapper.Common.Talk.ITalkerComponent.html",
    "title": "Interface ITalkerComponent | Documentation - FluentCeVIOWrapper",
    "keywords": "Interface ITalkerComponent 感情パラメータの単位オブジェクトインターフェイス。 Namespace: FluentCeVIOWrapper.Common.Talk Assembly: FluentCeVIOWrapper.Common.dll Syntax public interface ITalkerComponent Properties Id キャストの識別子を取得します。 Declaration string Id { get; } Property Value Type Description string Name 感情の名前を取得します。 Declaration string Name { get; } Property Value Type Description string Value 感情の値（0～100）を取得または設定します。 Declaration uint Value { get; set; } Property Value Type Description uint"
  },
  "api/FluentCeVIOWrapper.Common.Talk.TalkerComponent.html": {
    "href": "api/FluentCeVIOWrapper.Common.Talk.TalkerComponent.html",
    "title": "Class TalkerComponent | Documentation - FluentCeVIOWrapper",
    "keywords": "Class TalkerComponent 感情パラメータの単位オブジェクト。 Inheritance object TalkerComponent Implements ITalkerComponent IEquatable<TalkerComponent> Namespace: FluentCeVIOWrapper.Common.Talk Assembly: FluentCeVIOWrapper.Common.dll Syntax [Serializable] public record TalkerComponent : ITalkerComponent, IEquatable<TalkerComponent> Constructors TalkerComponent(string, string, uint) 感情パラメータの単位オブジェクトのコンストラクタ Declaration public TalkerComponent(string id, string name, uint value) Parameters Type Name Description string id <summary> キャストの識別子を取得します。 string name <summary> 感情の名前を取得します。 uint value <summary> 感情の値（0～100）を取得または設定します。 Properties Id キャストの識別子を取得します。 Declaration public string Id { get; set; } Property Value Type Description string Name 感情の名前を取得します。 Declaration public string Name { get; set; } Property Value Type Description string Value 感情の値（0～100）を取得または設定します。 Declaration [Range(0, 100)] public uint Value { get; set; } Property Value Type Description uint Implements ITalkerComponent IEquatable<T>"
  },
  "api/FluentCeVIOWrapper.Common.Talk.html": {
    "href": "api/FluentCeVIOWrapper.Common.Talk.html",
    "title": "Namespace FluentCeVIOWrapper.Common.Talk | Documentation - FluentCeVIOWrapper",
    "keywords": "Namespace FluentCeVIOWrapper.Common.Talk Classes TalkerComponent 感情パラメータの単位オブジェクト。 Interfaces IPhonemeData 音素データの単位オブジェクト。 IServiceControl メソッド・プロパティ名共有のためのInterface for ServiceControl ISpeakingState [FluentCeVIOWrapper] 利用しません。 ITalker メソッド・プロパティ名共有のためのInterface Interface for Talker ITalkerComponent 感情パラメータの単位オブジェクトインターフェイス。 Enums HostCloseMode [FluentCeVIOWrapper] 利用しません。 HostStartResult StartAsync() の結果コードを表します。"
  },
  "api/FluentCeVIOWrapper.Common.html": {
    "href": "api/FluentCeVIOWrapper.Common.html",
    "title": "Namespace FluentCeVIOWrapper.Common | Documentation - FluentCeVIOWrapper",
    "keywords": "Namespace FluentCeVIOWrapper.Common Classes CeVIOTalkMessage 内部の通信で使われるメッセージクラス FluentCeVIO A wrapper library for FluentCeVIOWrapper Client FluentCeVIOParam CeVIOにまとめてメソッドチェーン(Buiderパターン)でパラメータを指定できるパラメータクラス FluentCeVIOUtil ユーティリティクラス ServerCommand 通信で使われるコマンド定義 Enums Host ホストアプリ（CeVIO）の内部的なコンポーネント種別 Product CeVIO products SpeakSegment セリフをしゃべる際の分割方法を指定します"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Fluent CeVIO Wrapper API documents | Documentation - FluentCeVIOWrapper",
    "keywords": "Fluent CeVIO Wrapper API documents github repo"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Introduction to Fluent CeVIO Wrapper | Documentation - FluentCeVIOWrapper",
    "keywords": "Introduction to Fluent CeVIO Wrapper What's this 音声合成ソフト「CeVIO」の .NET外部連携インターフェイスを 最新の .NET 7等からも扱えるようにしたラッパーライブラリ＆連携サーバーです。.NET Framework 4.8以外むけの.NETアプリから利用できるようになります。また、async/await, ValueTask, nullableなどモダンな書き方に対応しています。 A wrapper library and integration IPC server for the .NET external integration interface of the speech synthesis software \"CeVIO\", which can be used from the latest .NET 7 and other .NET Framework 4.8 environments. It also supports modern C# writing style such as async/await, ValueTask, nullable, and so on. Problems of the CeVIO .NET interface #1 .NET Framework 4.8 「CeVIO」の .NET外部連携インターフェイス は .NET Framework 4.8向けのもので、最新の.NET環境（.NET 6～）から利用することができません。 そのため外部連携インターフェイスを利用する.NETアプリは、古い .NET Framework 4.8むけに作らなくてはなりませんでした…。 最新の.NET環境はマルチプラットホーム対応で、高速、C#の新しい文法が使えるなど、どうしても使いたい…！ 🎉そこで「Fluent CeVIO Wrapper」の登場です！ 外部連携インターフェイスとの通信部分をIPCサーバーである FluentCeVIOWrapper.Server が行います。 アプリは FluentCeVIOWrapper.Common ライブラリを組み込むだけで、IPCサーバー経由で外部連携インターフェイスを使用できます。 FluentCeVIOWrapper.Commonは .NET Standard 2.0 で書かれている為、 古い .NET Framework 環境、最新の .NET 6～ 環境どちらからも利用できます。 アプリ開発者は最新の .NET環境でアプリを組むことができます！🎉やったね！！！ #2. Not supported async/await 「CeVIO」の .NET外部連携インターフェイス は C#の標準の非同期処理であるasync/awaitに対応していません。 内部で通信を行っていたり、AIになってからは合成自体に時間がかかるようになったため、同期呼び出しだとプチフリーズすることがよくありました…。 標準の非同期処理を使うためにawait Task.Run()で処理をいちいち囲む必要があってかなりツラい…。 🎉そこで「Fluent CeVIO Wrapper」の登場です！ 基本的にすべて、async/awaitに対応しています。 可能であれば戻り値はValueTask<T>になるようにしています。 元の外部連携インターフェイスでC#のフィールドになっていて非同期処理ができないAPIは非同期のメソッドに置き換えられています。 詳しくはAPI documentのFluentCeVIOクラスをご覧ください！！ #3. Different name API (CeVIO CS / CeVIO AI) CeVIO Creative StudioむけとCeVIO AIむけの外部連携インターフェイスはほぼ同じであるものの、クラス名がTalkerとTalker2など微妙に異なり、両方のソフトに対応する際に違いを吸収するのが大変でした。 🎉そこで「Fluent CeVIO Wrapper」の登場です！ サーバー起動時のオプションを変えるだけで 共通のAPIでCeVIO CSもAIも呼び出すことができます。 （同時につかうにはサーバーを複数起動する必要があります） アプリ側ではCSとAIの違いをほとんど意識しないで組むことができます！ #4. Old style C# 7.3 CeVIOの外部連携インターフェイスは 古い .NET Framework 環境のため、そのままC#で書こうとすると C# 7.3 になっていました。 最新のC#に比べると… namespace のインデントが多い！！！！ usingが省略できない！！！！ 数行のプログラムでもクラスやMain関数が省略できない！！！ nullableが有効じゃなくてバグが入りやすい！！！！ switch式が使えない！！！！ isは使えてもis notが使えない！！ new()って書けない！ record型が作れない！！ 🎉そこで「Fluent CeVIO Wrapper」の登場です！ アプリ側は気にせず、最新のSDKと最新のC#で書けます！！ ※Fluent CeVIO Wrapper自体もC#10で書かれています。 Sample code //ファクトリメソッドで非同期生成 //IDisposableを継承しているためusingが使えます using var fcw = await FluentCeVIO.FactoryAsync(); //非同期でCeVIO外部連携インターフェイス起動 await fcw.StartAsync(); //利用可能なキャスト（ボイス）を非同期で取得 var casts = await fcw.GetAvailableCastsAsync(); //感情一覧を非同期で取得 var emotes = await fcw.GetComponentsAsync(); var newEmo = emotes .Select(v => { v.Value = (v.Name == \"哀しみ\") ? (uint)100 : (uint)0; return v; }) .ToList(); //メソッドチェーンでまとめてパラメータ指定 await fcw.CreateParam() .Cast(casts[0]) .Alpha(30) .Speed(50) .ToneScale(75) .Components(newEmo) .SendAsync(); //非同期で音声合成 await fcw.SpeakAsync(\"こんにちは。\"); //感情設定は Emotions() で簡単にできる await fcw.CreateParam() //キャスト名の直接指定でも実はOK .Cast(\"さとうささら\") //感情一覧を取得しなくても使える便利関数 //感情名が一致すれば設定します。存在しない場合は無視 .Emotions(new() { [\"元気\"] = 0, [\"哀しみ\"] = 0, [\"怒り\"] = 75, [\"普通\"] = 50 }) .SendAsync(); await fcw.SpeakAsync(\"こんにちは!!\"); Samples"
  },
  "index.html": {
    "href": "index.html",
    "title": "Fluent CeVIO Wrapper | Documentation - FluentCeVIOWrapper",
    "keywords": "Fluent CeVIO Wrapper A wrapper library and integration IPC server of the CeVIO API for .NET 7 / .NET Standard 2.0 What's this? 音声合成ソフト「CeVIO」の .NET外部連携インターフェイスを 最新の .NET 7等からも扱えるようにしたラッパーライブラリ＆連携サーバーです。.NET Framework 4.8以外むけの.NETアプリから利用できるようになります。また、async/await, ValueTask, nullableなどモダンな書き方に対応しています。 A wrapper library and integration IPC server for the .NET external integration interface of the speech synthesis software \"CeVIO\", which can be used from the latest .NET 7 and other .NET Framework 4.8 environments. It also supports modern C# writing style such as async/await, ValueTask, nullable, and so on. 特徴 / Features CeVIO AI, CeVIO Creative Studio 7 対応 共通ライブラリAPIはモダンな記法が可能 async / await nullable ValueTask<T> C# 10 nuget経由での導入 No more GAC、nupkg形式での提供 現在はローカルnugetの想定です 共通ライブラリは .NET Standard 2.0対応 .NET Framework系環境・.NET Core系環境どちらからも利用可能 .NET 6 / 7での動作を確認済 連携IPCサーバーは .NET Framework 4.8上で起動 名前付きパイプでのIPCを行います バグだらけ。テスト甘いです。 利用していないAPIはテストされていません 構成 FluentCeVIOWrapper.Common 共通ライブラリ .NET Standard 2.0 .nupkg FluentCeVIOWrapper.Server 連携IPCサーバー .NET Framework 4.8 Windows console app .exe 使い方 FluentCeVIOWrapper.Common nupkgファイルをDL download from Releases nupkgをローカルnugetリポジトリに登録 ライブラリとして追加。 例：dotnet add package FluentCeVIOWrapper.Common //ファクトリメソッドで非同期生成 //IDisposableを継承しているためusingが使えます using var fcw = await FluentCeVIO.FactoryAsync(); //非同期でCeVIO外部連携インターフェイス起動 await fcw.StartAsync(); //利用可能なキャスト（ボイス）を非同期で取得 var casts = await fcw.GetAvailableCastsAsync(); //感情一覧を非同期で取得 var emotes = await fcw.GetComponentsAsync(); var newEmo = emotes .Select(v => { v.Value = (v.Name == \"哀しみ\") ? (uint)100 : (uint)0; return v; }) .ToList(); //メソッドチェーンでまとめてパラメータ指定 await fcw.CreateParam() .Cast(casts[0]) .Alpha(30) .Speed(50) .ToneScale(75) .Components(newEmo) .SendAsync(); //非同期で音声合成 await fcw.SpeakAsync(\"こんにちは。\"); //感情設定は Emotions() で簡単にできる await fcw.CreateParam() //キャスト名の直接指定でも実はOK .Cast(\"さとうささら\") //感情一覧を取得しなくても使える便利関数 //感情名が一致すれば設定します。存在しない場合は無視 .Emotions(new() { [\"元気\"] = 0, [\"哀しみ\"] = 0, [\"怒り\"] = 75, [\"普通\"] = 50 }) .SendAsync(); await fcw.SpeakAsync(\"こんにちは!!\"); FluentCeVIOWrapper.Server exeファイルをDL download from Releases Process.Start()などで外部プロセス呼び出し サーバー起動後はFluentCeVIOWrapper.Common.FluentCeVIOクラスで通信が可能です 起動オプション -help : ヘルプ表示 -cevio : CeVIO_AI or CeVIO_CS -pipeName : IPCで使われる名前付きパイプ名。複数起動時に設定します。 -dllPath : CeVIOのインストールフォルダパス指定 CeVIO AIとCeVIO Creative Studioに同時に通信する場合、サーバーを2つ立ち上げてください。 API documents 📘Fluent CeVIO Wrapper API documents More github repo Samples KuchiPaku A lip sync generator tool for YMM4. This is also a sample FCW."
  }
}